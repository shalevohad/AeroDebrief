🧠 Copilot Prompt – Waveform Zoom Feature (C# WPF)

מטרה:
להוסיף למערכת ניתוח ההקלטות (Audio Analyzer UI) רכיב Waveform אינטראקטיבי הכולל יכולת Zoom In/Out,
בחירת אזור באמצעות גרירה בעכבר, וסנכרון עם גרף ה־Spectrum.

הנחיות לפיתוח:

1. פרויקט יעד:
   - הפרויקט הנוכחי הוא חלק ממערכת עיבוד תקשורת מבוססת SRS.
   - הפיצ’ר נוסף למודול התצוגה של נגן הקבצים (Playback Analyzer).
   - אין להשתמש ישירות במודול עיבוד הקבצים – רק ב־Core API הקיים.

2. דרישות פונקציונליות:
   - המשתמש יכול לבחור אזור ב־Waveform באמצעות גרירה (MouseDown → MouseMove → MouseUp).
   - אזור הבחירה מוצג כמלבן שקוף כחול עם גבול לבן.
   - עם שחרור העכבר, מבוצע Zoom In לאותו טווח זמן בלבד.
   - ניתן לבצע:
     - 🔍 Zoom In – לפי בחירה או לפי כפתור.
     - 🔎 Zoom Out – צעד אחד אחורה.
     - 🔄 Reset Zoom – חזרה לטווח המלא.
   - מתחת לגרף מוצג הטווח הנוכחי (Time Range: 00:05.320 – 00:08.750 (Zoom x2.5)).

3. התנהגות נדרשת:
   - Playback indicator ממשיך לנוע גם בזמן זום.
   - Seek פועל רק על הטווח הנראה.
   - ב־Reactive Rendering – יש לרנדר רק את החלק המוצג (לטובת ביצועים).
   - שמירה על סנכרון מלא עם גרף ה־Spectrum כאשר “Sync with Spectrum” מסומן.

4. UI Controls נדרשים:
   - Canvas ראשי: WaveformCanvas
   - כפתורי Toolbar: Zoom In, Zoom Out, Reset Zoom, Sync
   - Label לתצוגת הטווח
   - Playback controls קיימים נשארים ללא שינוי.

5. Best Practices:
   - שימוש ב־MVVM.
   - נתוני waveform נשמרים ב־ObservableCollection<float> / Span<float>.
   - Binding דו־כיווני ל־ZoomLevel ו־VisibleTimeRange.
   - ניתן להרחיב בהמשך ל־MiniMap thumbnail קטן בתחתית המסך.

משימה ל־Copilot:
צור רכיב Waveform Viewer עם תמיכה מלאה ב־Zoom, Selection Box, ו־Reactive Rendering,
כולל binding ל־SpectrumViewModel ו־PlaybackController הקיימים.
ודא שהמימוש תואם ל־C# .NET WPF (לא WinForms), עם ביצועים גבוהים ו־UI נקי.
